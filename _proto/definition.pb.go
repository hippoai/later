// Code generated by protoc-gen-go. DO NOT EDIT.
// source: definition.proto

/*
Package _proto is a generated protocol buffer package.

It is generated from these files:
	definition.proto

It has these top-level messages:
	Instance
	CreateInstanceInput
	CreateInstanceOutput
	AbortInstanceInput
	AbortInstanceOutput
	GetInstancesInput
	GetInstancesOutput
	StatsInput
	StatsOutput
*/
package _proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Instance struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TaskName      string `protobuf:"bytes,2,opt,name=task_name,json=taskName" json:"task_name,omitempty"`
	ExecutionTime string `protobuf:"bytes,3,opt,name=execution_time,json=executionTime" json:"execution_time,omitempty"`
	Parameters    []byte `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *Instance) Reset()                    { *m = Instance{} }
func (m *Instance) String() string            { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()               {}
func (*Instance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Instance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Instance) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *Instance) GetExecutionTime() string {
	if m != nil {
		return m.ExecutionTime
	}
	return ""
}

func (m *Instance) GetParameters() []byte {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type CreateInstanceInput struct {
	TaskName      string `protobuf:"bytes,1,opt,name=task_name,json=taskName" json:"task_name,omitempty"`
	ExecutionTime string `protobuf:"bytes,2,opt,name=execution_time,json=executionTime" json:"execution_time,omitempty"`
	Parameters    []byte `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *CreateInstanceInput) Reset()                    { *m = CreateInstanceInput{} }
func (m *CreateInstanceInput) String() string            { return proto.CompactTextString(m) }
func (*CreateInstanceInput) ProtoMessage()               {}
func (*CreateInstanceInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateInstanceInput) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *CreateInstanceInput) GetExecutionTime() string {
	if m != nil {
		return m.ExecutionTime
	}
	return ""
}

func (m *CreateInstanceInput) GetParameters() []byte {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type CreateInstanceOutput struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *CreateInstanceOutput) Reset()                    { *m = CreateInstanceOutput{} }
func (m *CreateInstanceOutput) String() string            { return proto.CompactTextString(m) }
func (*CreateInstanceOutput) ProtoMessage()               {}
func (*CreateInstanceOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateInstanceOutput) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type AbortInstanceInput struct {
	TaskName   string `protobuf:"bytes,1,opt,name=task_name,json=taskName" json:"task_name,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *AbortInstanceInput) Reset()                    { *m = AbortInstanceInput{} }
func (m *AbortInstanceInput) String() string            { return proto.CompactTextString(m) }
func (*AbortInstanceInput) ProtoMessage()               {}
func (*AbortInstanceInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AbortInstanceInput) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *AbortInstanceInput) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type AbortInstanceOutput struct {
}

func (m *AbortInstanceOutput) Reset()                    { *m = AbortInstanceOutput{} }
func (m *AbortInstanceOutput) String() string            { return proto.CompactTextString(m) }
func (*AbortInstanceOutput) ProtoMessage()               {}
func (*AbortInstanceOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GetInstancesInput struct {
	Start string `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *GetInstancesInput) Reset()                    { *m = GetInstancesInput{} }
func (m *GetInstancesInput) String() string            { return proto.CompactTextString(m) }
func (*GetInstancesInput) ProtoMessage()               {}
func (*GetInstancesInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetInstancesInput) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *GetInstancesInput) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

type GetInstancesOutput struct {
	Instances []*Instance `protobuf:"bytes,1,rep,name=instances" json:"instances,omitempty"`
}

func (m *GetInstancesOutput) Reset()                    { *m = GetInstancesOutput{} }
func (m *GetInstancesOutput) String() string            { return proto.CompactTextString(m) }
func (*GetInstancesOutput) ProtoMessage()               {}
func (*GetInstancesOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetInstancesOutput) GetInstances() []*Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type StatsInput struct {
}

func (m *StatsInput) Reset()                    { *m = StatsInput{} }
func (m *StatsInput) String() string            { return proto.CompactTextString(m) }
func (*StatsInput) ProtoMessage()               {}
func (*StatsInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StatsOutput struct {
	Token     string   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	NInMemory int64    `protobuf:"varint,2,opt,name=n_in_memory,json=nInMemory" json:"n_in_memory,omitempty"`
	Tasks     []string `protobuf:"bytes,3,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *StatsOutput) Reset()                    { *m = StatsOutput{} }
func (m *StatsOutput) String() string            { return proto.CompactTextString(m) }
func (*StatsOutput) ProtoMessage()               {}
func (*StatsOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StatsOutput) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *StatsOutput) GetNInMemory() int64 {
	if m != nil {
		return m.NInMemory
	}
	return 0
}

func (m *StatsOutput) GetTasks() []string {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func init() {
	proto.RegisterType((*Instance)(nil), "hippoai.later.Instance")
	proto.RegisterType((*CreateInstanceInput)(nil), "hippoai.later.CreateInstanceInput")
	proto.RegisterType((*CreateInstanceOutput)(nil), "hippoai.later.CreateInstanceOutput")
	proto.RegisterType((*AbortInstanceInput)(nil), "hippoai.later.AbortInstanceInput")
	proto.RegisterType((*AbortInstanceOutput)(nil), "hippoai.later.AbortInstanceOutput")
	proto.RegisterType((*GetInstancesInput)(nil), "hippoai.later.GetInstancesInput")
	proto.RegisterType((*GetInstancesOutput)(nil), "hippoai.later.GetInstancesOutput")
	proto.RegisterType((*StatsInput)(nil), "hippoai.later.StatsInput")
	proto.RegisterType((*StatsOutput)(nil), "hippoai.later.StatsOutput")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Later service

type LaterClient interface {
	CreateInstance(ctx context.Context, in *CreateInstanceInput, opts ...grpc.CallOption) (*CreateInstanceOutput, error)
	AbortInstance(ctx context.Context, in *AbortInstanceInput, opts ...grpc.CallOption) (*AbortInstanceOutput, error)
	GetInstances(ctx context.Context, in *GetInstancesInput, opts ...grpc.CallOption) (*GetInstancesOutput, error)
	GetSuccessful(ctx context.Context, in *GetInstancesInput, opts ...grpc.CallOption) (*GetInstancesOutput, error)
	GetFailed(ctx context.Context, in *GetInstancesInput, opts ...grpc.CallOption) (*GetInstancesOutput, error)
	GetAborted(ctx context.Context, in *GetInstancesInput, opts ...grpc.CallOption) (*GetInstancesOutput, error)
	Stats(ctx context.Context, in *StatsInput, opts ...grpc.CallOption) (*StatsOutput, error)
}

type laterClient struct {
	cc *grpc.ClientConn
}

func NewLaterClient(cc *grpc.ClientConn) LaterClient {
	return &laterClient{cc}
}

func (c *laterClient) CreateInstance(ctx context.Context, in *CreateInstanceInput, opts ...grpc.CallOption) (*CreateInstanceOutput, error) {
	out := new(CreateInstanceOutput)
	err := grpc.Invoke(ctx, "/hippoai.later.Later/CreateInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laterClient) AbortInstance(ctx context.Context, in *AbortInstanceInput, opts ...grpc.CallOption) (*AbortInstanceOutput, error) {
	out := new(AbortInstanceOutput)
	err := grpc.Invoke(ctx, "/hippoai.later.Later/AbortInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laterClient) GetInstances(ctx context.Context, in *GetInstancesInput, opts ...grpc.CallOption) (*GetInstancesOutput, error) {
	out := new(GetInstancesOutput)
	err := grpc.Invoke(ctx, "/hippoai.later.Later/GetInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laterClient) GetSuccessful(ctx context.Context, in *GetInstancesInput, opts ...grpc.CallOption) (*GetInstancesOutput, error) {
	out := new(GetInstancesOutput)
	err := grpc.Invoke(ctx, "/hippoai.later.Later/GetSuccessful", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laterClient) GetFailed(ctx context.Context, in *GetInstancesInput, opts ...grpc.CallOption) (*GetInstancesOutput, error) {
	out := new(GetInstancesOutput)
	err := grpc.Invoke(ctx, "/hippoai.later.Later/GetFailed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laterClient) GetAborted(ctx context.Context, in *GetInstancesInput, opts ...grpc.CallOption) (*GetInstancesOutput, error) {
	out := new(GetInstancesOutput)
	err := grpc.Invoke(ctx, "/hippoai.later.Later/GetAborted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laterClient) Stats(ctx context.Context, in *StatsInput, opts ...grpc.CallOption) (*StatsOutput, error) {
	out := new(StatsOutput)
	err := grpc.Invoke(ctx, "/hippoai.later.Later/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Later service

type LaterServer interface {
	CreateInstance(context.Context, *CreateInstanceInput) (*CreateInstanceOutput, error)
	AbortInstance(context.Context, *AbortInstanceInput) (*AbortInstanceOutput, error)
	GetInstances(context.Context, *GetInstancesInput) (*GetInstancesOutput, error)
	GetSuccessful(context.Context, *GetInstancesInput) (*GetInstancesOutput, error)
	GetFailed(context.Context, *GetInstancesInput) (*GetInstancesOutput, error)
	GetAborted(context.Context, *GetInstancesInput) (*GetInstancesOutput, error)
	Stats(context.Context, *StatsInput) (*StatsOutput, error)
}

func RegisterLaterServer(s *grpc.Server, srv LaterServer) {
	s.RegisterService(&_Later_serviceDesc, srv)
}

func _Later_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaterServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hippoai.later.Later/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaterServer).CreateInstance(ctx, req.(*CreateInstanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Later_AbortInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortInstanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaterServer).AbortInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hippoai.later.Later/AbortInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaterServer).AbortInstance(ctx, req.(*AbortInstanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Later_GetInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaterServer).GetInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hippoai.later.Later/GetInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaterServer).GetInstances(ctx, req.(*GetInstancesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Later_GetSuccessful_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaterServer).GetSuccessful(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hippoai.later.Later/GetSuccessful",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaterServer).GetSuccessful(ctx, req.(*GetInstancesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Later_GetFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaterServer).GetFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hippoai.later.Later/GetFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaterServer).GetFailed(ctx, req.(*GetInstancesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Later_GetAborted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaterServer).GetAborted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hippoai.later.Later/GetAborted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaterServer).GetAborted(ctx, req.(*GetInstancesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Later_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaterServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hippoai.later.Later/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaterServer).Stats(ctx, req.(*StatsInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Later_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hippoai.later.Later",
	HandlerType: (*LaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstance",
			Handler:    _Later_CreateInstance_Handler,
		},
		{
			MethodName: "AbortInstance",
			Handler:    _Later_AbortInstance_Handler,
		},
		{
			MethodName: "GetInstances",
			Handler:    _Later_GetInstances_Handler,
		},
		{
			MethodName: "GetSuccessful",
			Handler:    _Later_GetSuccessful_Handler,
		},
		{
			MethodName: "GetFailed",
			Handler:    _Later_GetFailed_Handler,
		},
		{
			MethodName: "GetAborted",
			Handler:    _Later_GetAborted_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Later_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "definition.proto",
}

func init() { proto.RegisterFile("definition.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0x84, 0x4e, 0xeb, 0x49, 0x5b, 0x3a, 0xaf, 0x63, 0x5d, 0x86, 0xb6, 0xce, 0x08,
	0x69, 0xda, 0x45, 0x23, 0x0d, 0x21, 0xa4, 0x71, 0x05, 0x48, 0x54, 0x15, 0xff, 0x44, 0xc7, 0x0d,
	0xdc, 0x44, 0x5e, 0x7a, 0xd6, 0x99, 0x35, 0x4e, 0x14, 0x3b, 0x88, 0xdd, 0x70, 0xc1, 0x2b, 0xf0,
	0x68, 0xbc, 0x02, 0xcf, 0x81, 0x90, 0x9d, 0xa4, 0x5d, 0xda, 0x69, 0x13, 0x52, 0xaf, 0x5a, 0x7f,
	0x3e, 0xe7, 0xfb, 0x7d, 0xce, 0x71, 0x02, 0xed, 0x31, 0x9e, 0x73, 0xc1, 0x15, 0x8f, 0x45, 0x3f,
	0x49, 0x63, 0x15, 0x93, 0xe6, 0x05, 0x4f, 0x92, 0x98, 0xf1, 0xfe, 0x94, 0x29, 0x4c, 0xbd, 0x87,
	0x93, 0x38, 0x9e, 0x4c, 0xd1, 0x67, 0x09, 0xf7, 0x99, 0x10, 0xb1, 0x62, 0xba, 0x56, 0xe6, 0xc5,
	0xf4, 0x07, 0xac, 0x0f, 0x85, 0x54, 0x4c, 0x84, 0x48, 0x5a, 0x60, 0xf3, 0x71, 0xd7, 0xea, 0x59,
	0x87, 0xf5, 0x91, 0xcd, 0xc7, 0x64, 0x17, 0xea, 0x8a, 0xc9, 0xcb, 0x40, 0xb0, 0x08, 0xbb, 0xb6,
	0x91, 0xd7, 0xb5, 0xf0, 0x9e, 0x45, 0x48, 0x1e, 0x43, 0x0b, 0xbf, 0x63, 0x98, 0x69, 0xb3, 0x40,
	0xf1, 0x08, 0xbb, 0x8e, 0xa9, 0x68, 0xce, 0xd4, 0x4f, 0x3c, 0x42, 0xb2, 0x07, 0x90, 0xb0, 0x94,
	0x45, 0xa8, 0x30, 0x95, 0xdd, 0x7b, 0x3d, 0xeb, 0xb0, 0x31, 0xba, 0xa6, 0xd0, 0x2b, 0xd8, 0x7c,
	0x95, 0x22, 0x53, 0x58, 0xa6, 0x18, 0x8a, 0x24, 0x53, 0x55, 0xb4, 0x75, 0x27, 0xda, 0xbe, 0x1b,
	0xed, 0x2c, 0xa1, 0x9f, 0x41, 0xa7, 0x8a, 0xfe, 0x90, 0x29, 0xcd, 0xde, 0x07, 0x97, 0x17, 0x4a,
	0x30, 0x7b, 0x1e, 0x50, 0x4a, 0xc3, 0x31, 0x1d, 0x01, 0x79, 0x71, 0x16, 0xa7, 0xea, 0x3f, 0x22,
	0x2f, 0x78, 0xda, 0x4b, 0x9e, 0x5b, 0xb0, 0x59, 0xf1, 0xcc, 0xb3, 0xd0, 0xe7, 0xb0, 0x31, 0xc0,
	0x99, 0x28, 0x73, 0x52, 0x07, 0x6a, 0x52, 0xb1, 0x54, 0x15, 0x94, 0x7c, 0x41, 0xda, 0xe0, 0xa0,
	0x28, 0xad, 0xf5, 0x5f, 0xfa, 0x06, 0xc8, 0xf5, 0xe6, 0xe2, 0x78, 0x4f, 0xa1, 0x5e, 0x72, 0x65,
	0xd7, 0xea, 0x39, 0x87, 0xee, 0xf1, 0x76, 0xbf, 0x72, 0x65, 0xfa, 0x65, 0xcb, 0x68, 0x5e, 0x49,
	0x1b, 0x00, 0xa7, 0x8a, 0xa9, 0x3c, 0x02, 0xfd, 0x0c, 0xae, 0x59, 0x15, 0x9e, 0x1d, 0xa8, 0xa9,
	0xf8, 0x12, 0x45, 0x99, 0xc8, 0x2c, 0xc8, 0x1e, 0xb8, 0x22, 0xe0, 0x22, 0x88, 0x30, 0x8a, 0xd3,
	0x2b, 0x93, 0xcc, 0x19, 0xd5, 0xc5, 0x50, 0xbc, 0x33, 0x82, 0xe9, 0x62, 0xf2, 0x52, 0xcf, 0xc6,
	0x31, 0x5d, 0x7a, 0x71, 0xfc, 0xb7, 0x06, 0xb5, 0xb7, 0x3a, 0x06, 0xf9, 0x06, 0xad, 0xea, 0x80,
	0x08, 0x5d, 0x08, 0x7a, 0xc3, 0xd5, 0xf1, 0x1e, 0xdd, 0x5a, 0x53, 0x3c, 0xd7, 0xdd, 0x9f, 0xbf,
	0xff, 0xfc, 0xb2, 0xb7, 0x68, 0xdb, 0x0f, 0xcd, 0x76, 0x50, 0x1e, 0xf4, 0xc4, 0x3a, 0x22, 0x29,
	0x34, 0x2b, 0xb3, 0x20, 0x07, 0x0b, 0x96, 0xcb, 0xd3, 0xf7, 0xe8, 0x6d, 0x25, 0x05, 0xd4, 0x33,
	0xd0, 0x0e, 0xbd, 0xef, 0x33, 0xbd, 0x5b, 0x61, 0x0a, 0x68, 0x5c, 0x9f, 0x15, 0xe9, 0x2d, 0xf8,
	0x2d, 0xdd, 0x02, 0xef, 0xe0, 0x96, 0x8a, 0x02, 0xb8, 0x63, 0x80, 0x9b, 0xb4, 0xe5, 0x4f, 0x70,
	0x8e, 0x93, 0x9a, 0x97, 0x40, 0x73, 0x80, 0xea, 0x34, 0x0b, 0x43, 0x94, 0xf2, 0x3c, 0x9b, 0xae,
	0x06, 0x38, 0x3f, 0xa1, 0x06, 0xca, 0x99, 0xbb, 0x26, 0x5e, 0x40, 0x7d, 0x80, 0xea, 0x35, 0xe3,
	0x53, 0x1c, 0xaf, 0x86, 0xf6, 0xc0, 0xd0, 0xda, 0xd4, 0x35, 0xb4, 0x73, 0xe3, 0xac, 0x49, 0x5f,
	0x01, 0x06, 0xa8, 0xcc, 0x04, 0x56, 0x85, 0xda, 0x36, 0xa8, 0x0d, 0xda, 0x30, 0x28, 0x96, 0x5b,
	0x6b, 0xd6, 0x47, 0xa8, 0x99, 0x17, 0x81, 0xec, 0x2c, 0x98, 0xcc, 0x5f, 0x16, 0xcf, 0xbb, 0x69,
	0xab, 0x30, 0xde, 0x30, 0xc6, 0x2e, 0x5d, 0xf3, 0xa5, 0x56, 0x4f, 0xac, 0xa3, 0x97, 0x07, 0x5f,
	0xf6, 0x27, 0x5c, 0x5d, 0x64, 0x67, 0xfd, 0x30, 0x8e, 0xfc, 0xa2, 0xd5, 0x37, 0xad, 0x7e, 0x60,
	0xbe, 0xda, 0x67, 0x6b, 0xe6, 0xe7, 0xc9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x61, 0x43,
	0xd4, 0xfd, 0x05, 0x00, 0x00,
}
